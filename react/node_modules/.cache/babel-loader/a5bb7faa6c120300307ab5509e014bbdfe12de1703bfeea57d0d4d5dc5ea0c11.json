{"ast":null,"code":"var _jsxFileName = \"D:\\\\workplace\\\\cursor\\\\chatbot\\\\client\\\\src\\\\components\\\\ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid'; // 需要安装: npm install uuid\nimport './ChatWindow.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatWindow() {\n  _s();\n  // 存储聊天记录\n  const [messages, setMessages] = useState([{\n    text: '你好！我是聊天机器人，很高兴为您服务！',\n    isBot: true\n  }]);\n  // 存储输入框的值\n  const [inputValue, setInputValue] = useState('');\n  // 用于自动滚动\n  const messagesEndRef = useRef(null);\n  // 为会话生成一个固定的user_id\n  const [userId] = useState(uuidv4());\n  const [isLoading, setIsLoading] = useState(false);\n\n  // 创建 axios 实例\n  const api = axios.create({\n    baseURL: 'http://192.168.31.65:8000/api',\n    timeout: 30000 // 设置为30秒\n  });\n\n  // 处理发送消息\n  const handleSendMessage = async () => {\n    if (inputValue.trim() === '' || isLoading) return;\n\n    // 添加用户消息\n    const userMessage = {\n      text: inputValue,\n      isBot: false\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue('');\n    setIsLoading(true);\n    try {\n      // 发送请求到后端，添加user_id\n      const response = await api.post('/chat', {\n        user_id: userId,\n        message: userMessage.text\n      });\n\n      // 添加机器人回复\n      setMessages(prev => [...prev, {\n        text: response.data.response,\n        isBot: true\n      }]);\n    } catch (error) {\n      console.error('Error:', error);\n      let errorMessage = '抱歉，我遇到了一些问题，请稍后再试。';\n      if (error.code === 'ECONNABORTED') {\n        errorMessage = '请求超时，请稍后重试。';\n      } else if (error.response) {\n        if (error.response.status === 422) {\n          errorMessage = '请求格式错误，请检查输入。';\n        } else {\n          errorMessage = `服务器错误 (${error.response.status})，请稍后重试。`;\n        }\n      } else if (error.request) {\n        errorMessage = '无法连接到服务器，请检查网络连接。';\n      }\n      setMessages(prev => [...prev, {\n        text: errorMessage,\n        isBot: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 处理按键事件\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault(); // 阻止默认的换行行为\n      handleSendMessage();\n    }\n  };\n\n  // 自动滚动到底部\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.isBot ? 'bot' : 'user'}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"\\u8BF7\\u8F93\\u5165\\u6D88\\u606F...\",\n        rows: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"\\u53D1\\u9001\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatWindow, \"YgOZH1LifTx+cB9qzoeRDFUXfwI=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","v4","uuidv4","jsxDEV","_jsxDEV","ChatWindow","_s","messages","setMessages","text","isBot","inputValue","setInputValue","messagesEndRef","userId","isLoading","setIsLoading","api","create","baseURL","timeout","handleSendMessage","trim","userMessage","prev","response","post","user_id","message","data","error","console","errorMessage","code","status","request","handleKeyPress","e","key","shiftKey","preventDefault","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","value","onChange","target","onKeyPress","placeholder","rows","onClick","_c","$RefreshReg$"],"sources":["D:/workplace/cursor/chatbot/client/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';  // 需要安装: npm install uuid\r\nimport './ChatWindow.css';\r\n\r\nfunction ChatWindow() {\r\n  // 存储聊天记录\r\n  const [messages, setMessages] = useState([\r\n    { text: '你好！我是聊天机器人，很高兴为您服务！', isBot: true }\r\n  ]);\r\n  // 存储输入框的值\r\n  const [inputValue, setInputValue] = useState('');\r\n  // 用于自动滚动\r\n  const messagesEndRef = useRef(null);\r\n  // 为会话生成一个固定的user_id\r\n  const [userId] = useState(uuidv4());\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // 创建 axios 实例\r\n  const api = axios.create({\r\n    baseURL: 'http://192.168.31.65:8000/api',\r\n    timeout: 30000,  // 设置为30秒\r\n  });\r\n\r\n  // 处理发送消息\r\n  const handleSendMessage = async () => {\r\n    if (inputValue.trim() === '' || isLoading) return;\r\n    \r\n    // 添加用户消息\r\n    const userMessage = { text: inputValue, isBot: false };\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInputValue('');\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // 发送请求到后端，添加user_id\r\n      const response = await api.post('/chat', {\r\n        user_id: userId,\r\n        message: userMessage.text\r\n      });\r\n\r\n      // 添加机器人回复\r\n      setMessages(prev => [...prev, {\r\n        text: response.data.response,\r\n        isBot: true\r\n      }]);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      let errorMessage = '抱歉，我遇到了一些问题，请稍后再试。';\r\n      \r\n      if (error.code === 'ECONNABORTED') {\r\n        errorMessage = '请求超时，请稍后重试。';\r\n      } else if (error.response) {\r\n        if (error.response.status === 422) {\r\n          errorMessage = '请求格式错误，请检查输入。';\r\n        } else {\r\n          errorMessage = `服务器错误 (${error.response.status})，请稍后重试。`;\r\n        }\r\n      } else if (error.request) {\r\n        errorMessage = '无法连接到服务器，请检查网络连接。';\r\n      }\r\n\r\n      setMessages(prev => [...prev, {\r\n        text: errorMessage,\r\n        isBot: true\r\n      }]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // 处理按键事件\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault(); // 阻止默认的换行行为\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  // 自动滚动到底部\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"chat-window\">\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message, index) => (\r\n          <div \r\n            key={index} \r\n            className={`message ${message.isBot ? 'bot' : 'user'}`}\r\n          >\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <div className=\"chat-input-area\">\r\n        <textarea\r\n          value={inputValue}\r\n          onChange={(e) => setInputValue(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n          placeholder=\"请输入消息...\"\r\n          rows=\"3\"\r\n        />\r\n        <button onClick={handleSendMessage}>发送</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatWindow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}